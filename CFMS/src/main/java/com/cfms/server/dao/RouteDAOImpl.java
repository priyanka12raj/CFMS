package com.cfms.server.dao;

import java.beans.PropertyVetoException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.cfms.server.dao.interfaces.RouteDAO;
import com.cfms.shared.exceptions.CFMSException;
import com.cfms.shared.pojo.PickupPoint;
import com.cfms.shared.pojo.Route;

/**
 * Implements the methods specified by RouteDAO
 * @author Priyanka, Samta, Chaitra
 *
 */
public class RouteDAOImpl implements RouteDAO
{

	@Override
	/*
	 * (non-Javadoc)
	 * @see com.cfms.server.dao.interfaces.RouteDAO#insertRoute(com.cfms.shared.pojo.Route)
	 */
	public boolean insertRoute(Route route) throws CFMSException
	{
		boolean insertSuccess=false;
		Connection conn=null;
		PreparedStatement insert_stmt=null;
		ResultSet rs_route_id;
		PickupPoint retrieved_pickupPoint;
		PickupPointDAOImpl pickup_dao=new PickupPointDAOImpl();
		ArrayList<PickupPoint> pickup_points=(ArrayList<PickupPoint>) route.getPickupPoints();
		try
		{
			conn=DataSource.getInstance().getConnection(); //get the connection from connection pool
			insert_stmt = conn.prepareStatement("insert into route(route_name) values (?)",Statement.RETURN_GENERATED_KEYS);
			insert_stmt.setString(1, route.getRoute_name());
			insert_stmt.execute();
			//for getting the autogenerated key route_no 
			rs_route_id=insert_stmt.getGeneratedKeys();
			if(rs_route_id.next())
			{
				route.setRoute_no(rs_route_id.getInt(1));
				//adding all the pickup points
				for(int i=0;i<pickup_points.size();i++)
				{
					//if pickup point is not in pickup_point table, insert it
					if((retrieved_pickupPoint=pickup_dao.getPickupPoint(pickup_points.get(i).getLocation()))==null)
					{
								pickup_dao.insertPickupPoint(pickup_points.get(i));
								retrieved_pickupPoint=pickup_dao.getPickupPoint(pickup_points.get(i).getLocation());
					}
					pickup_dao.insertPickupPointRoute(retrieved_pickupPoint, route.getRoute_no(), i);
				}
			}
			insertSuccess=true;
		}
		catch(SQLException | IOException | PropertyVetoException e)
		{
			throw new CFMSException(e);
		}
		finally
		{
			try {
				conn.close(); //close the connection
				insert_stmt.close();
			} catch (SQLException e) {
				throw new CFMSException(e);
			}
		}
		return insertSuccess;
	
	}

	@Override
	/*
	 * (non-Javadoc)
	 * @see com.cfms.server.dao.interfaces.RouteDAO#getRoute(java.lang.String)
	 */
	public Route getRoute(String route_name) throws CFMSException
	{
		Connection conn=null;
		PreparedStatement select_stmt=null;
		Route route=null;
		ResultSet route_rs;
		PickupPointDAOImpl pickup_dao=new PickupPointDAOImpl();
		
		try
		{
			conn=DataSource.getInstance().getConnection(); //get the connection from connection pool
			select_stmt = conn.prepareStatement("select * from route where route_name=?");
			select_stmt.setString(1, route_name);
			route_rs=select_stmt.executeQuery();
			if(route_rs.next())
			{
				route=new Route();
				route.setRoute_name(route_rs.getString("route_name"));
				route.setRoute_no(route_rs.getInt("route_no"));
				route.setPickupPoints((pickup_dao.getPickupPoints(route.getRoute_no())));
			}
			
		}
		catch(SQLException | IOException | PropertyVetoException e)
		{
			throw new CFMSException(e);
		}
		finally
		{
			try {
				conn.close(); //close the connection
				select_stmt.close();
			} catch (SQLException e) {
				throw new CFMSException(e);
			}
		}
		return route;
	}

	@Override
	/*
	 * (non-Javadoc)
	 * @see com.cfms.server.dao.interfaces.RouteDAO#getRoute(int)
	 */
	public Route getRoute(int route_no) throws CFMSException
	{
		Connection conn=null;
		PreparedStatement select_stmt=null;
		Route route=null;
		ResultSet route_rs;
		PickupPointDAOImpl pickup_dao=new PickupPointDAOImpl();
		
		try
		{
			conn=DataSource.getInstance().getConnection(); //get the connection from connection pool
			select_stmt = conn.prepareStatement("select * from route where route_no=?");
			select_stmt.setInt(1, route_no);
			route_rs=select_stmt.executeQuery();
			if(route_rs.next())
			{
				route=new Route();
				route.setRoute_name(route_rs.getString("route_name"));
				route.setRoute_no(route_rs.getInt("route_no"));
				route.setPickupPoints((pickup_dao.getPickupPoints(route.getRoute_no())));
			}
			
		}
		catch(SQLException | IOException | PropertyVetoException e)
		{
			throw new CFMSException(e);
		}
		finally
		{
			try {
				conn.close(); //close the connection
				select_stmt.close();
			} catch (SQLException e) {
				throw new CFMSException(e);
			}
		}
		return route;
	}

	@Override
	/*
	 * (non-Javadoc)
	 * @see com.cfms.server.dao.interfaces.RouteDAO#getAllRoutes()
	 */
	public List<Route> getAllRoutes() throws CFMSException
	{
		Connection conn=null;
		PreparedStatement select_stmt=null;
		PickupPointDAOImpl pick_dao=new PickupPointDAOImpl();
		List<Route> routes=new ArrayList<>();
		Route route=null;
		ResultSet route_rs;
		try
		{
			conn=DataSource.getInstance().getConnection(); //get the connection from connection pool
			select_stmt = conn.prepareStatement("select * from route order by route_no");
			route_rs=select_stmt.executeQuery();
			while(route_rs.next())
			{
				route=new Route();
				route.setRoute_name(route_rs.getString("route_name"));
				route.setRoute_no(route_rs.getInt("route_no"));
				route.setPickupPoints(pick_dao.getPickupPoints(route.getRoute_no()));
				routes.add(route);
			}
			
		}
		catch(SQLException | IOException | PropertyVetoException e)
		{
			throw new CFMSException(e);
		}
		finally
		{
			try {
				conn.close(); //close the connection
				select_stmt.close();
			} catch (SQLException e) {
				throw new CFMSException(e);
			}
		}
		return routes;
	}

	@Override
	/*
	 * (non-Javadoc)
	 * @see com.cfms.server.dao.interfaces.RouteDAO#addPickupPointToRoute(com.cfms.shared.pojo.PickupPoint, int, int)
	 */
	public boolean addPickupPointToRoute(PickupPoint pickup_point, int route_no,int index) throws CFMSException
	{
		boolean insertSuccess=false;
		Connection conn=null;
		PreparedStatement insert_stmt=null;
		PickupPoint pickup_point_valid;
		PickupPointDAOImpl pickup_dao=new PickupPointDAOImpl();
		
		try
		{
			if((pickup_point_valid=pickup_dao.getPickupPoint(pickup_point.getLocation()))==null)
			{
				pickup_dao.insertPickupPoint(pickup_point);
				pickup_point_valid=pickup_point;
			}
			conn=DataSource.getInstance().getConnection(); //get the connection from connection pool
			System.out.println(pickup_point_valid.getPickup_id());
			insert_stmt = conn.prepareStatement("insert into route_pickup_point(pickup_point_id,route_no,pickup_index) values(?,?,?)");
			insert_stmt.setInt(1,pickup_point_valid.getPickup_id());
			insert_stmt.setInt(2,route_no);
			insert_stmt.setInt(2,index);
			insert_stmt.execute();
			insertSuccess=true;
		}
		catch(SQLException | IOException | PropertyVetoException e)
		{
			throw new CFMSException(e);
		}
		finally
		{
			try {
				conn.close(); //close the connection
				insert_stmt.close();
			} catch (SQLException e) {
				throw new CFMSException(e);
			}
		}
		return insertSuccess;
	}

	@Override
	/*
	 * (non-Javadoc)
	 * @see com.cfms.server.dao.interfaces.RouteDAO#removePickupPointToRoute(com.cfms.shared.pojo.PickupPoint, int)
	 */
	public boolean removePickupPointToRoute(PickupPoint pickup_point,
			int routeNo) throws CFMSException
	{
		boolean deleteSuccess=false;
		Connection conn=null;
		PreparedStatement delete_stmt=null;
		try
		{
			conn=DataSource.getInstance().getConnection(); //get the connection from connection pool
			delete_stmt = conn.prepareStatement("delete from route_pickup_point where pickup_point_id=? and route_no=?");
			delete_stmt.setInt(1, pickup_point.getPickup_id());
			delete_stmt.setInt(2, routeNo);
			delete_stmt.execute();
			deleteSuccess=true;
		}
		catch(SQLException | IOException | PropertyVetoException e)
		{
			throw new CFMSException(e);
		}
		finally
		{
			try {
				conn.close(); //close the connection
				delete_stmt.close();
			} catch (SQLException e) {
				throw new CFMSException(e);
			}
		}
		return deleteSuccess;
	}

}
